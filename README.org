#+TITLE: org-mcp-server
#+AUTHOR: SebastiÃ¡n Zaffarano
#+EMAIL: sebas@zaffarano.com

[[https://github.com/szaffarano/org-mcp-server/actions/workflows/ci.yml][https://github.com/szaffarano/org-mcp-server/actions/workflows/ci.yml/badge.svg]]
[[https://github.com/szaffarano/org-mcp-server/actions/workflows/coverage.yml][https://github.com/szaffarano/org-mcp-server/actions/workflows/coverage.yml/badge.svg]]
[[https://codecov.io/gh/szaffarano/org-mcp-server][https://codecov.io/gh/szaffarano/org-mcp-server/branch/master/graph/badge.svg]]
[[https://github.com/szaffarano/org-mcp-server/blob/master/LICENSE][https://img.shields.io/badge/license-MIT-blue.svg]]
[[https://github.com/szaffarano/org-mcp-server][https://img.shields.io/badge/rust-2024%2B-orange.svg]]
[[https://deps.rs/repo/github/szaffarano/org-mcp-server][https://deps.rs/repo/github/szaffarano/org-mcp-server/status.svg]]

*ðŸš§ Work in Progress*: This project is under active development.

A [[https://modelcontextprotocol.io/][Model Context Protocol (MCP)]] server for
org-mode knowledge management. Provides search, content access, and note
linking capabilities for your org-mode files through the MCP protocol.

* Features

** MCP Resources

- =org://= â€” List all org-mode files in configured directories
- =org://{file}= â€” Access raw content of org files
- =org-outline://{file}= â€” Get hierarchical structure as JSON
- =org-heading://{file}#{heading}= â€” Access specific headings by path
- =org-id://{id}= â€” Find content by org-mode ID properties

** MCP Tools

- =org-file-list= â€” List all org files in configured directories
- =org-search= â€” Search for text content across all org files using fuzzy matching

** CLI Tool

- =org-cli list= â€” List all .org files in a directory
- =org-cli init= â€” Initialize or validate an org directory
- =org-cli read= â€” Read the contents of an org file
- =org-cli outline= â€” Get the outline (headings) of an org file
- =org-cli heading= â€” Extract content from a specific heading in an org file
- =org-cli element-by-id= â€” Extract content from an element by ID across all org files
- =org-cli search= â€” Search for text content across all org files using fuzzy matching

* Usage Examples

** Search Commands

#+begin_src bash
# Basic search
org-cli search "project planning"

# Limit results and use JSON output
org-cli search "TODO" --limit 5 --format json

# Search in specific directory with custom snippet size
org-cli search "meeting notes" --dir ~/documents/org --snippet-size 50

# Full parameter example
org-cli search "bug fix" -d ~/projects/notes -l 10 -s 75 -f json
#+end_src

** Search Parameters

- =--dir/-d= â€” Directory to search for org files (default: =~/org/=)
- =--limit/-l= â€” Maximum number of results to return
- =--format/-f= â€” Output format: =plain= or =json= (default: =plain=)
- =--snippet-size/-s= â€” Maximum snippet size in characters (default: =100=)

The search uses fuzzy matching with:
- AND logic for multiple terms (all terms must match on the same line)
- Unicode-safe text processing
- Ranked results by relevance score
- Configurable snippet truncation with "â€¦" indicator

* Architecture

Multi-crate Rust workspace:

- *org-core* â€” Business logic and org-mode parsing
- *mcp-server* â€” MCP protocol implementation
- *org-cli* â€” CLI interface for testing and direct usage

Built with:

- [[https://crates.io/crates/orgize][orgize]] for org-mode parsing
- [[https://crates.io/crates/rmcp][rmcp]] for MCP protocol
- [[https://crates.io/crates/tokio][tokio]] for async runtime
- [[https://crates.io/crates/nucleo-matcher][nucleo-matcher]] for fuzzy text search

* Installation

** Using Nix Flakes

#+begin_src bash
# Run directly with nix
nix run github:szaffarano/org-mcp-server

# Install to profile
nix profile install github:szaffarano/org-mcp-server

# Development environment
nix develop github:szaffarano/org-mcp-server
#+end_src

** From Source

#+begin_src bash
# Clone and build
git clone https://github.com/szaffarano/org-mcp-server
cd org-mcp-server
cargo build --release

# Run MCP server
cargo run --bin org-mcp-server

# Test with CLI
cargo run --bin org-cli -- list
#+end_src

* Configuration

** AI Agent integration

Add the following to your agent configuration (e.g.,
   =~/.config/opencode/opencode.json=, =~/.claude.json=, etc.):

#+begin_src json
{
  "mcpServers": {
    "org-mode": {
      "command": "/path/to/org-mcp-server",
      "args": ["--root", "/path/to/your/org/files"],
      "env": {}
    }
  }
}
#+end_src

Or if installed via Nix:

#+begin_src json
{
  "mcpServers": {
    "org-mode": {
      "command": "nix",
      "args": ["run", "github:szaffarano/org-mcp-server", "--", "--root", "/path/to/your/org/files"],
      "env": {}
    }
  }
}
#+end_src

** Server Configuration

The server scans configured directories for =.org= files. Configuration is
   handled through command-line arguments or environment variables
   (implementation pending).

* Development

#+begin_src bash
# Run all tests
cargo test

# Run specific crate tests
cargo test -p org-core

# Format and lint
cargo fmt
cargo clippy

# Run examples
cargo run --example <name>
#+end_src

** Code Coverage

The project includes comprehensive code coverage analysis using =cargo-llvm-cov=:

#+begin_src bash
# Quick coverage summary
make coverage-summary

# Generate HTML coverage report
make coverage-html

# Generate CI-compatible LCOV format
make coverage-ci

# Generate all coverage formats
make coverage

# Development workflow (format, lint, test, coverage)
make dev
#+end_src

Coverage reports are generated in the =coverage/= directory:
- =coverage/html/index.html= â€” Interactive HTML report
- =coverage/lcov.info= â€” LCOV format for CI integration
- =coverage/coverage.json= â€” JSON format for programmatic analysis

*CI Integration*: Coverage is automatically calculated and reported on pull requests via GitHub Actions.

* Roadmap

** Phase 1: Core Functionality âœ…

- [X] File discovery and listing
- [X] Basic content access via MCP resources
- [X] Org-mode parsing with orgize
- [X] ID-based element lookup
- [X] CLI tool for testing
- [X] Full-text search across org files

** Phase 2: Advanced Features ðŸš§
- [ ] Tag-based filtering and querying
- [ ] Link following and backlink discovery (org-roam support)
- [ ] Metadata caching for performance
- [ ] Configuration file support
- [ ] Agenda-related Functionality

** Phase 3: Extended Capabilities ðŸ“‹

- [ ] Content creation and modification tools
- [ ] Media file reference handling
- [ ] Integration with org-roam databases
- [ ] Real-time file watching and updates
- [ ] Advanced query language

* License

[[file:LICENSE][MIT License]] - see LICENSE file for details.
